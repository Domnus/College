## Grupo
## 607290 - Andressa Caroline R. Bueno   
## 600784 - Bento Carlos S. dos Santos     
## 610453 - Bruno Campos                           
## 604593 - Frederico Hanai                         
## 606537 - Hugo Seiti Odajima                  
## 548111 - Paulo G. Astrauskas

//Importa bibliotecas para MQTT e UUID
const mqtt = require('mqtt');
const { v4: uuidv4 } = require('uuid');

// Configurações MQTT
const mqttBroker = 'mqtt://localhost';
const mqttTopic = 'topico/dados';

// Função para gerar coordenadas de latitude e longitude realistas
function getRandomCoordinate() {
    const min = -90; // valor mínimo para latitude
    const max = 90;  // valor máximo para latitude
    const latitude = (Math.random() * (max - min) + min).toFixed(6);
  
    const minLon = -180; // valor mínimo para longitude
    const maxLon = 180;  // valor máximo para longitude
    const longitude = (Math.random() * (maxLon - minLon) + minLon).toFixed(6);
  
    return { latitude, longitude };
  }
  
// Cria um cliente MQTT
const client = mqtt.connect(mqttBroker);

// Evento chamado quando o cliente MQTT se conecta ao broker
client.on('connect', () => {
  console.log('Conectado ao broker MQTT');

  // Publica informações a cada segundo
  setInterval(() => {
    // Gera um ID UUID
    const id = uuidv4();

    // Gera latitude e longitude aleatórias
    const coordenadas = getRandomCoordinate();

    // Monta o payload JSON
    const payload = JSON.stringify({ id, coordenadas });

    // Publica as informações no tópico MQTT
    client.publish(mqttTopic, payload, { qos: 1 });

    console.log(`Informações publicadas: ${payload}`);
  }, 10000);
});

// Lidar com erros de conexão MQTT
client.on('error', (error) => {
  console.error('Erro de conexão MQTT:', error);
});

const express = require('express');
const bodyParser = require('body-parser');
const mqtt = require('mqtt');
const amqp = require('amqplib');

const app = express();
const port = 3000;

// Configurações MQTT
const mqttBroker = 'mqtt://localhost';
const mqttTopic = 'topico/dados';

// Configurações RabbitMQ
const rabbitMQUrl = 'amqp://localhost';
const queueName = 'localizacao';

// Cria um cliente MQTT
const client = mqtt.connect(mqttBroker);

// Middleware para analisar o corpo da solicitação como JSON
app.use(bodyParser.json());

// Flag para garantir que a configuração do RabbitMQ seja feita apenas uma vez
let rabbitMQConfigured = false;

// Conectar ao RabbitMQ e criar a fila
async function setupRabbitMQ() {
  try {
    if (!rabbitMQConfigured) {
      const connection = await amqp.connect(rabbitMQUrl);
      const channel = await connection.createChannel();
      await channel.assertQueue(queueName, { durable: true });
      console.log(`Fila RabbitMQ '${queueName}' criada e pronta para receber mensagens.`);
      rabbitMQConfigured = true;
    }
  } catch (error) {
    console.error('Erro ao configurar RabbitMQ:', error.message);
  }
}

// Rota para receber dados de localização via MQTT e encaminhar para a fila
app.on('receber-dados', async (data) => {
  const id = data.id;
  const coordenadas = data.coordenadas;

  // Conectar ao RabbitMQ e criar a fila (se ainda não foi configurada)
  await setupRabbitMQ();

  try {
    // Conectar ao RabbitMQ
    const connection = await amqp.connect(rabbitMQUrl);
    const channel = await connection.createChannel();

    // Enviar dados para a fila
    await channel.sendToQueue(queueName, Buffer.from(JSON.stringify({ id, coordenadas })), { persistent: true });
  } catch (error) {
    console.error('Erro ao enviar dados para a fila RabbitMQ:', error.message);
  }
});

// Conectar ao broker MQTT
client.on('connect', () => {
  console.log('Conectado ao broker MQTT');

  // Subscrever ao tópico MQTT para receber dados de localização
  client.subscribe(mqttTopic);

  // Lidar com mensagens recebidas
  client.on('message', (topic, message) => {
    try {
      const data = JSON.parse(message.toString());
      // Enviar dados para a fila quando uma mensagem é recebida
      app.emit('receber-dados', data);
    } catch (error) {
      console.error('Erro ao processar mensagem MQTT:', error.message);
    }
  });
});

// Iniciar o servidor Express
app.listen(port, () => {
  console.log(`Servidor API iniciado em http://localhost:${port}`);
});